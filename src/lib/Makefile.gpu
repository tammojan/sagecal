CC=gcc
CXX=g++
NVCC=nvcc
# CFLAGS= -Wall -O3 -g -DHAVE_CUDA -DHYBRID_CODE
# -pg added in order to make call trees.
CFLAGS= -Wall -O3 -g -pg -DHAVE_CUDA -DHYBRID_CODE
CLIBS= -lm -lpthread
LAPACK=-L/usr/local/OpenBLAS/lib/ -lopenblas -lgfortran -lpthread

CUDAINC=/usr/local/cuda/include
CUDALIB=-L/usr/local/cuda/lib64 -lcuda -lcudart
#NVCC=/usr/local/cuda/bin/nvcc
#NVCFLAGS=-arch=sm_35 -g -G --ptxas-options=-v -O3
# NVCFLAGS=-arch=sm_35 --ptxas-options=-v -O3
NVCFLAGS=-gencode arch=compute_35,code=sm_35 -gencode arch=compute_37,code=sm_37 -gencode arch=compute_50,code=sm_50 -gencode arch=compute_52,code=sm_52 -gencode arch=compute_60,code=sm_60 -gencode arch=compute_61,code=compute_61 -gencode arch=compute_62,code=compute_62 --ptxas-options=-v -O3

#### glib
GLIBI=-I/usr/include/glib-2.0 -I/usr/lib64/glib-2.0/include/
GLIBL=-lglib-2.0 -L/usr/lib64

# NVML
NVML_INC=/usr/include/nvidia/gdk/
NVML_LIB=-lnvidia-ml -L/usr/lib64/nvidia/

INCLUDES= -I. -I$(CUDAINC) -I$(NVML_INC)
LIBPATH= $(CUDALIB)


OBJECTS=readsky.o dataio.o predict.o lmfit.o lbfgs.o myblas.o mderiv.o clmfit.o clmfit_nocuda.o residual.o barrier.o robust.o robustlm.o oslmfit.o mderiv_fl.o clmfit_fl.o updatenu.o robust_lbfgs_nocuda.o robust_fl.o manifold_fl.o rtr_solve_cuda.o rtr_solve_robust_cuda.o diagnostics.o diag_fl.o manifold_average.o consensus_poly.o rtr_solve_robust_cuda_admm.o rtr_solve_robust_admm.o admm_solve.o load_balance.o transforms.o stationbeam.o predict_withbeam.o  predict_withbeam_gpu.o predict_model.o predict_model_device.o


default:libsagecal.a
readsky.o:readsky.c
	$(CC) $(CFLAGS) $(INCLUDES) $(GLIBI)  -c $<
dataio.o:dataio.c
	$(CC) $(CFLAGS) $(INCLUDES) $(GLIBI)  -c $<
predict.o:predict.c
	$(CC) $(CFLAGS) $(INCLUDES) $(GLIBI)  -c $<
lmfit.o:lmfit.c
	$(CC) $(CFLAGS) $(INCLUDES) $(GLIBI)  -c $<
lbfgs.o:lbfgs.c
	$(CC) $(CFLAGS) $(INCLUDES) $(GLIBI)  -c $<
myblas.o:myblas.c
	$(CC) $(CFLAGS) $(INCLUDES) $(GLIBI) -c $<
mderiv.o:mderiv.cu
	$(NVCC) $(NVCFLAGS) $(INCLUDES) $(GLIBI) -c $<
clmfit.o:clmfit.c
	$(CC) $(CFLAGS) $(INCLUDES) $(GLIBI) -c $<
clmfit_nocuda.o:clmfit_nocuda.c
	$(CC) $(CFLAGS) $(INCLUDES) $(GLIBI)  -c $<
residual.o:residual.c
	$(CC) $(CFLAGS) $(INCLUDES) $(GLIBI)  -c $<
barrier.o:barrier.c
	$(CC) $(CFLAGS) $(INCLUDES) $(GLIBI)  -c $<
robustlm.o:robustlm.c
	$(CC) $(CFLAGS) $(INCLUDES) $(GLIBI)  -c $<
robust.o:robust.cu
	$(NVCC) $(NVCFLAGS) $(INCLUDES) $(GLIBI) -c $<
robust_fl.o:robust_fl.cu
	$(NVCC) $(NVCFLAGS) $(INCLUDES) $(GLIBI) -c $<
oslmfit.o:oslmfit.c
	$(CC) $(CFLAGS) $(INCLUDES) $(GLIBI)  -c $<
robust_lbfgs_nocuda.o:robust_lbfgs_nocuda.c
	$(CC) $(CFLAGS) $(INCLUDES) $(GLIBI)  -c $<
clmfit_fl.o:clmfit_fl.c
	$(CC) $(CFLAGS) $(INCLUDES) $(GLIBI)  -c $<
updatenu.o:updatenu.c
	$(CC) $(CFLAGS) $(INCLUDES) $(GLIBI) -c $<
mderiv_fl.o:mderiv_fl.cu
	$(NVCC) $(NVCFLAGS) $(INCLUDES) $(GLIBI) -c $<
manifold_fl.o:manifold_fl.cu
	$(NVCC) $(NVCFLAGS) $(INCLUDES) $(GLIBI) -c $<
rtr_solve_cuda.o:rtr_solve_cuda.c
	$(CC) $(CFLAGS) $(INCLUDES) $(GLIBI) -c $<
rtr_solve_robust_cuda.o:rtr_solve_robust_cuda.c
	$(CC) $(CFLAGS) $(INCLUDES) $(GLIBI) -c $<
diagnostics.o:diagnostics.c
	$(CC) $(CFLAGS) $(INCLUDES) $(GLIBI) -c $<
diag_fl.o:diag_fl.cu
	$(NVCC) $(NVCFLAGS) $(INCLUDES) $(GLIBI) -c $<
manifold_average.o:manifold_average.c
	$(CC) $(CFLAGS) $(INCLUDES) $(GLIBI)  -c $<
consensus_poly.o:consensus_poly.c
	$(CC) $(CFLAGS) $(INCLUDES) $(GLIBI)  -c $<
rtr_solve_robust_cuda_admm.o:rtr_solve_robust_cuda_admm.c
	$(CC) $(CFLAGS) $(INCLUDES) $(GLIBI) -c $<
rtr_solve_robust_admm.o:rtr_solve_robust_admm.c
	$(CC) $(CFLAGS) $(INCLUDES) $(GLIBI) -c $<
admm_solve.o:admm_solve.c
	$(CC) $(CFLAGS) $(INCLUDES) $(GLIBI)  -c $<
load_balance.o:load_balance.c
	$(CC) $(CFLAGS) $(INCLUDES) $(GLIBI)  -c $<
transforms.o:transforms.c
	$(CC) $(CFLAGS) $(INCLUDES) $(GLIBI)  -c $<
stationbeam.o:stationbeam.c
	$(CC) $(CFLAGS) $(INCLUDES) $(GLIBI)  -c $<
predict_withbeam.o:predict_withbeam.c
	$(CC) $(CFLAGS) $(INCLUDES) $(GLIBI)  -c $<
predict_withbeam_gpu.o:predict_withbeam_gpu.c
	$(CC) $(CFLAGS) $(INCLUDES) $(GLIBI)  -c $<
## for dynamic parallelism, two stage compilation
predict_model.o:predict_model_device.o
	$(NVCC) $(NVCFLAGS) -lineinfo -dlink $(INCLUDES) $(GLIBI) -o $@ $<
predict_model_device.o:predict_model.cu
	$(NVCC) $(NVCFLAGS) -lineinfo -rdc=true $(INCLUDES) $(GLIBI) -o $@ -c $<


RANLIB=ranlib
libsagecal.a:$(OBJECTS) sagecal.h
	ar rv $@ $(OBJECTS); \
	$(RANLIB) $@;
